name: Build and Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+*'  # Only version tags like v3.1, v3.2, v3.1.1, etc.
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            python-version: '3.11'
            name: 'windows'
            artifact-name: 'GDSync.exe'
          - os: macos-latest
            python-version: '3.11'
            name: 'macos'
            artifact-name: 'GDSync.dmg'
          - os: ubuntu-latest
            python-version: '3.11'
            name: 'linux'
            artifact-name: 'GDSync-linux'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyQt6 pyinstaller

    - name: Build with PyInstaller (Windows)
      if: matrix.name == 'windows'
      run: |
        pyinstaller --onefile --windowed --icon=icon.png --name=GDSync gdsync.py

    - name: Build with PyInstaller (Linux)
      if: matrix.name == 'linux'
      run: |
        pyinstaller --onefile --icon=icon.png --name=GDSync-linux gdsync.py

    - name: Build with PyInstaller (macOS)
      if: matrix.name == 'macos'
      run: |
        pyinstaller --onefile --windowed --icon=icon.png --name=GDSync gdsync.py

    - name: Create DMG (macOS)
      if: matrix.name == 'macos'
      run: |
        mkdir -p dist-dmg
        cp -r dist/GDSync.app dist-dmg/
        hdiutil create -volname "GDSync" -srcfolder dist-dmg -ov -format UDZO dist/GDSync.dmg

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.name }}-build
        path: |
          dist/${{ matrix.artifact-name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '.')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./windows-build/GDSync.exe
        asset_name: GDSync.exe
        asset_content_type: application/octet-stream

    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./macos-build/GDSync.dmg
        asset_name: GDSync.dmg
        asset_content_type: application/octet-stream

    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./linux-build/GDSync-linux
        asset_name: GDSync-linux
        asset_content_type: application/octet-stream

    - name: Upload Desktop File
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./gdsync.desktop
        asset_name: gdsync.desktop
        asset_content_type: text/plain

    - name: Upload Icon
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./icon.png
        asset_name: icon.png
        asset_content_type: image/png

  update-aur:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '.')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup SSH for AUR
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.AUR_SSH_KEY }}" > ~/.ssh/aur
        chmod 600 ~/.ssh/aur
        ssh-keyscan -H aur.archlinux.org >> ~/.ssh/known_hosts
        cat > ~/.ssh/config << EOF
        Host aur.archlinux.org
          HostName aur.archlinux.org
          User aur
          IdentityFile ~/.ssh/aur
        EOF

    - name: Clone AUR repository
      run: |
        git clone ssh://aur@aur.archlinux.org/gdsync-bin.git aur-repo

    - name: Update AUR package
      run: |
        cd aur-repo
        
        # Get version from git tag
        VERSION=${GITHUB_REF#refs/tags/v}
        
        # Update PKGBUILD
        cat > PKGBUILD << 'EOF'
        # Maintainer: MalikHw47 <help.malicorporation@gmail.com>
        pkgname=gdsync-bin
        pkgver=${VERSION}
        pkgrel=1
        pkgdesc="A PyQt6-based tool for syncing Geometry Dash save data between PC and Android devices"
        arch=('x86_64')
        url="https://github.com/MalikHw/gdsync"
        license=('custom')
        depends=('android-tools')
        provides=('gdsync')
        conflicts=('gdsync')
        source=("${pkgname}-${pkgver}::${url}/releases/download/v${pkgver}/GDSync-linux"
                "${pkgname}-${pkgver}.desktop::${url}/releases/download/v${pkgver}/gdsync.desktop"
                "${pkgname}-${pkgver}.png::${url}/releases/download/v${pkgver}/icon.png")
        sha256sums=('SKIP'
                    'SKIP'
                    'SKIP')

        package() {
            # Install the binary
            install -Dm755 "${srcdir}/${pkgname}-${pkgver}" "${pkgdir}/usr/bin/gdsync"
            
            # Install desktop file
            install -Dm644 "${srcdir}/${pkgname}-${pkgver}.desktop" "${pkgdir}/usr/share/applications/gdsync.desktop"
            
            # Install icon
            install -Dm644 "${srcdir}/${pkgname}-${pkgver}.png" "${pkgdir}/usr/share/pixmaps/gdsync.png"
        }
        EOF
        
        # Replace VERSION placeholder
        sed -i "s/\${VERSION}/${VERSION}/g" PKGBUILD
        
        # Generate .SRCINFO
        makepkg --printsrcinfo > .SRCINFO
        
        # Configure Git
        git config user.name "malikhw"
        git config user.email "help.malicorporation@gmail.com"
        
        # Commit and push changes
        git add PKGBUILD .SRCINFO
        git commit -m "Update to version ${VERSION}"
        git push origin master
